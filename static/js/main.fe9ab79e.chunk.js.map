{"version":3,"sources":["components/Statistics/Statistics.jsx","components/FeedbackOptions/FeedbackOptions.jsx","components/Section/Section.jsx","components/Notification/Notification.jsx","components/App.jsx","index.jsx"],"names":["Statistics","good","neutral","bad","total","positivePercentage","FeedbackOptions","onLeaveFeedback","name","onClick","Section","title","children","Notification","FeedbackForm","state","positiveFeedback","handleClick","e","target","setState","prevState","countTotalFeedback","countPositiveFeedbackPercentage","this","Math","round","Component","defaultProps","ReactDOM","render","document","getElementById"],"mappings":"2NAEe,SAASA,EAAT,GAAsE,IAAjDC,EAAgD,EAAhDA,KAAMC,EAA0C,EAA1CA,QAASC,EAAiC,EAAjCA,IAAKC,EAA4B,EAA5BA,MAAOC,EAAqB,EAArBA,mBAC3D,OACI,oCACA,oCAAUJ,GACV,uCAAaC,GACb,mCAASC,GACT,qCAAWC,GACX,iDAAuBC,EAAvB,MCPO,SAASC,EAAT,GAA6C,IAAnBC,EAAkB,EAAlBA,gBACrC,OACI,oCACA,4BAAQC,KAAK,OAAOC,QAASF,GAA7B,QACA,4BAAQC,KAAK,UAAUC,QAASF,GAAhC,WACA,4BAAQC,KAAK,MAAMC,QAASF,GAA5B,QCLO,SAASG,EAAT,GAAsC,IAAnBC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,SACrC,OACI,oCACA,4BAAKD,GACJC,GCJM,SAASC,EAAT,GAAgC,EAARF,MACnC,OACI,oCACA,iD,ICGaG,E,4MAKjBC,MAAQ,CACJd,KAAM,EACNC,QAAS,EACTC,IAAK,EACLC,MAAO,EACPY,iBAAkB,G,EAGpBC,YAAc,SAACC,GAAO,IACVV,EAASU,EAAEC,OAAXX,KAEV,EAAKY,UAAS,SAAAC,GACV,OAAO,eACFb,EAAOa,EAAUb,GAAO,MAK7B,EAAKc,qBACL,EAAKC,mC,mEAGTC,KAAKJ,UAAS,SAAAC,GACZ,MAAO,CACHjB,MAAOiB,EAAUpB,KAAOoB,EAAUnB,QAAUmB,EAAUlB,U,wDAM5DqB,KAAKJ,UAAS,SAAAC,GACZ,MAAO,CACHL,iBAAkBS,KAAKC,MAAOL,EAAUpB,KAAOoB,EAAUjB,MAAQ,W,+BAMzE,OACE,oCACA,kBAACM,EAAD,CAASC,MAAM,yBACX,kBAACL,EAAD,CAEIC,gBAAiBiB,KAAKP,eAK9B,kBAACP,EAAD,CAASC,MAAM,cACda,KAAKT,MAAMX,MAAQ,EACV,kBAACJ,EAAD,CACAC,KAAMuB,KAAKT,MAAMd,KACjBC,QAASsB,KAAKT,MAAMb,QACpBC,IAAKqB,KAAKT,MAAMZ,IAChBC,MAAOoB,KAAKT,MAAMX,MAClBC,mBAAoBmB,KAAKT,MAAMC,mBAErC,kBAACH,EAAD,Y,GA9D8Bc,aAArBb,EACVc,aAAe,GCL1BC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.fe9ab79e.chunk.js","sourcesContent":["import React from 'react';\n\nexport default function Statistics({good, neutral, bad, total, positivePercentage}) {\n    return (\n        <>\n        <p>Good: {good}</p>\n        <p>Neutral: {neutral}</p>\n        <p>Bad: {bad}</p>\n        <p>Total: {total}</p>\n        <p>Positive Feedback: {positivePercentage}%</p>\n        </>\n    )\n    \n}","import React from 'react';\n\nexport default function FeedbackOptions({onLeaveFeedback}) {\n    return (\n        <>\n        <button name=\"good\" onClick={onLeaveFeedback} >Good</button>\n        <button name=\"neutral\" onClick={onLeaveFeedback} >Neutral</button>\n        <button name=\"bad\" onClick={onLeaveFeedback} >Bad</button>\n        </>\n    )  \n}","import React from 'react';\n\nexport default function Section ({title, children}) {\n    return (\n        <>\n        <h2>{title}</h2>\n        {children}\n        </>\n    )\n    \n}","import React from 'react';\n\nexport default function Notification ({title}) {\n    return (\n        <>\n        <p>No feedback given</p>\n        </>\n    )\n}","import React, { Component } from 'react';\nimport Statistics from './Statistics/Statistics'\nimport FeedbackOptions from './FeedbackOptions/FeedbackOptions'\nimport Section from './Section/Section'\nimport Notification from './Notification/Notification'\n\n\n\nexport default class FeedbackForm extends Component {\n    static defaultProps = {};\n  \n    static propTypes = {};\n\n    state = {\n        good: 0,\n        neutral: 0,\n        bad: 0,\n        total: 0,\n        positiveFeedback: 0\n      }\n\n      handleClick = (e) => {\n          const { name } = e.target\n\n        this.setState(prevState => {\n            return {\n                [name]: prevState[name] +1\n            }\n        }\n\n            );\n            this.countTotalFeedback();\n            this.countPositiveFeedbackPercentage()\n      };\n      countTotalFeedback() {\n        this.setState(prevState => {\n          return {\n              total: prevState.good + prevState.neutral + prevState.bad\n          }\n      }\n          );\n      }\n      countPositiveFeedbackPercentage() {\n        this.setState(prevState => {\n          return {\n              positiveFeedback: Math.round (prevState.good / prevState.total * 100)\n          }\n      }\n          );\n      }\n    render() {\n      return (\n        <>\n        <Section title=\"Please leave feedback\">\n            <FeedbackOptions \n                // options={} \n                onLeaveFeedback={this.handleClick}>\n            </FeedbackOptions>\n        </Section>\n\n\n        <Section title=\"Statistics\">\n        {this.state.total > 0 ? (\n                  <Statistics \n                  good={this.state.good} \n                  neutral={this.state.neutral} \n                  bad={this.state.bad} \n                  total={this.state.total} \n                  positivePercentage={this.state.positiveFeedback} \n                  />\n        ) : <Notification />}\n            \n        </Section>\n\n        </>); \n    }\n  }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App'\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}